const personSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: Number,
  favoriteFoods: [String]
});

const Person = mongoose.model('Person', personSchema);

const createPerson = () => {
    const person = new Person({
      name: "John Doe",
      age: 30,
      favoriteFoods: ["pizza", "burgers"]
    });
  
    person.save((err, data) => {
      if (err) return console.error(err);
      console.log("Person saved:", data);
    });
  };
  
  createPerson();
  
  const arrayOfPeople = [
    { name: "John", age: 29, favoriteFoods: ["pizza", "sushi"] },
    { name: "Jane", age: 32, favoriteFoods: ["pasta", "salad"] },
    { name: "Alice", age: 25, favoriteFoods: ["steak", "burritos"] }
  ];
  
  Person.create(arrayOfPeople, (err, data) => {
    if (err) return console.error(err);
    console.log("People created:", data);
  });
  
  Person.find({ name: "John" }, (err, people) => {
    if (err) return console.error(err);
    console.log("People named John:", people);
  });
  Person.findOne({ favoriteFoods: "pizza" }, (err, person) => {
    if (err) return console.error(err);
    console.log("Person who likes pizza:", person);
  });
  const personId = 'your-person-id';

Person.findById(personId, (err, person) => {
  if (err) return console.error(err);
  console.log("Person found by ID:", person);
});
Person.findById(personId, (err, person) => {
    if (err) return console.error(err);
  
    person.favoriteFoods.push("hamburger");
    person.save((err, updatedPerson) => {
      if (err) return console.error(err);
      console.log("Updated person:", updatedPerson);
    });
  });
  Person.findOneAndUpdate(
    { name: "John" },
    { age: 20 },
    { new: true },
    (err, updatedPerson) => {
      if (err) return console.error(err);
      console.log("Updated person:", updatedPerson);
    }
  );
  Person.findByIdAndRemove(personId, (err, removedPerson) => {
    if (err) return console.error(err);
    console.log("Removed person:", removedPerson);
  });
  Person.remove({ name: "Mary" }, (err, result) => {
    if (err) return console.error(err);
    console.log("Result of deletion:", result);
  });
  Person.find({ favoriteFoods: "burritos" })
  .sort({ name: 1 })
  .limit(2)
  .select('-age')
  .exec((err, people) => {
    if (err) return console.error(err);
    console.log("People who like burritos:", people);
  });
